// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/kyverno/kyverno/api/kyverno/v1

package v1

import (
	apiextv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	"k8s.io/pod-security-admission/api"
	"k8s.io/api/admissionregistration/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"github.com/sigstore/k8s-manifest-sigstore/pkg/k8smanifest"
	admissionv1 "k8s.io/api/admission/v1"
)

// FailurePolicyType specifies a failure policy that defines how unrecognized errors from the admission endpoint are handled.
// +kubebuilder:validation:Enum=Ignore;Fail
#FailurePolicyType: string // #enumFailurePolicyType

#enumFailurePolicyType:
	#Ignore |
	#Fail

// Ignore means that an error calling the webhook is ignored.
#Ignore: #FailurePolicyType & "Ignore"

// Fail means that an error calling the webhook causes the admission to fail.
#Fail: #FailurePolicyType & "Fail"

// ApplyRulesType controls whether processing stops after one rule is applied or all rules are applied.
// +kubebuilder:validation:Enum=All;One
#ApplyRulesType: string // #enumApplyRulesType

#enumApplyRulesType:
	#ApplyAll |
	#ApplyOne

// ApplyAll applies all rules in a policy that match.
#ApplyAll: #ApplyRulesType & "All"

// ApplyOne applies only the first matching rule in the policy.
#ApplyOne: #ApplyRulesType & "One"

// ForeachOrder specifies the iteration order in foreach statements.
// +kubebuilder:validation:Enum=Ascending;Descending
#ForeachOrder: string // #enumForeachOrder

#enumForeachOrder:
	#Ascending |
	#Descending

// Ascending means iterating from first to last element.
#Ascending: #ForeachOrder & "Ascending"

// Descending means iterating from last to first element.
#Descending: #ForeachOrder & "Descending"

// AnyAllConditions consists of conditions wrapped denoting a logical criteria to be fulfilled.
// AnyConditions get fulfilled when at least one of its sub-conditions passes.
// AllConditions get fulfilled only when all of its sub-conditions pass.
#AnyAllConditions: {
	// AnyConditions enable variable-based conditional rule execution. This is useful for
	// finer control of when an rule is applied. A condition can reference object data
	// using JMESPath notation.
	// Here, at least one of the conditions need to pass
	// +optional
	any?: [...#Condition] @go(AnyConditions,[]Condition)

	// AllConditions enable variable-based conditional rule execution. This is useful for
	// finer control of when an rule is applied. A condition can reference object data
	// using JMESPath notation.
	// Here, all of the conditions need to pass
	// +optional
	all?: [...#Condition] @go(AllConditions,[]Condition)
}

// ContextEntry adds variables and data sources to a rule Context. Either a
// ConfigMap reference or a APILookup must be provided.
#ContextEntry: {
	// Name is the variable name.
	name?: string @go(Name)

	// ConfigMap is the ConfigMap reference.
	configMap?: null | #ConfigMapReference @go(ConfigMap,*ConfigMapReference)

	// APICall is an HTTP request to the Kubernetes API server, or other JSON web service.
	// The data returned is stored in the context with the name for the context entry.
	apiCall?: null | #APICall @go(APICall,*APICall)

	// ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
	// details.
	imageRegistry?: null | #ImageRegistry @go(ImageRegistry,*ImageRegistry)

	// Variable defines an arbitrary JMESPath context variable that can be defined inline.
	variable?: null | #Variable @go(Variable,*Variable)
}

// Variable defines an arbitrary JMESPath context variable that can be defined inline.
#Variable: {
	// Value is any arbitrary JSON object representable in YAML or JSON form.
	// +optional
	value?: null | apiextv1.#JSON @go(Value,*apiextv1.JSON)

	// JMESPath is an optional JMESPath Expression that can be used to
	// transform the variable.
	// +optional
	jmesPath?: string @go(JMESPath)

	// Default is an optional arbitrary JSON object that the variable may take if the JMESPath
	// expression evaluates to nil
	// +optional
	default?: null | apiextv1.#JSON @go(Default,*apiextv1.JSON)
}

// ImageRegistry defines requests to an OCI/Docker V2 registry to fetch image
// details.
#ImageRegistry: {
	// Reference is image reference to a container image in the registry.
	// Example: ghcr.io/kyverno/kyverno:latest
	reference: string @go(Reference)

	// JMESPath is an optional JSON Match Expression that can be used to
	// transform the ImageData struct returned as a result of processing
	// the image reference.
	// +optional
	jmesPath?: string @go(JMESPath)

	// ImageRegistryCredentials provides credentials that will be used for authentication with registry
	// +kubebuilder:validation:Optional
	imageRegistryCredentials?: null | #ImageRegistryCredentials @go(ImageRegistryCredentials,*ImageRegistryCredentials)
}

// ConfigMapReference refers to a ConfigMap
#ConfigMapReference: {
	// Name is the ConfigMap name.
	name: string @go(Name)

	// Namespace is the ConfigMap namespace.
	namespace?: string @go(Namespace)
}

#APICall: {
	// URLPath is the URL path to be used in the HTTP GET or POST request to the
	// Kubernetes API server (e.g. "/api/v1/namespaces" or  "/apis/apps/v1/deployments").
	// The format required is the same format used by the `kubectl get --raw` command.
	// See https://kyverno.io/docs/writing-policies/external-data-sources/#variables-from-kubernetes-api-server-calls
	// for details.
	// +kubebuilder:validation:Optional
	urlPath: string @go(URLPath)

	// Method is the HTTP request type (GET or POST).
	// +kubebuilder:default=GET
	method?: #Method @go(Method)

	// Data specifies the POST data sent to the server.
	// +kubebuilder:validation:Optional
	data?: [...#RequestData] @go(Data,[]RequestData)

	// Service is an API call to a JSON web service
	// +kubebuilder:validation:Optional
	service?: null | #ServiceCall @go(Service,*ServiceCall)

	// JMESPath is an optional JSON Match Expression that can be used to
	// transform the JSON response returned from the server. For example
	// a JMESPath of "items | length(@)" applied to the API server response
	// for the URLPath "/apis/apps/v1/deployments" will return the total count
	// of deployments across all namespaces.
	// +kubebuilder:validation:Optional
	jmesPath?: string @go(JMESPath)
}

#ServiceCall: {
	// URL is the JSON web service URL. A typical form is
	// `https://{service}.{namespace}:{port}/{path}`.
	url: string @go(URL)

	// CABundle is a PEM encoded CA bundle which will be used to validate
	// the server certificate.
	// +kubebuilder:validation:Optional
	caBundle: string @go(CABundle)
}

// Method is a HTTP request type.
// +kubebuilder:validation:Enum=GET;POST
#Method: string

// RequestData contains the HTTP POST data
#RequestData: {
	// Key is a unique identifier for the data value
	key: string @go(Key)

	// Value is the data value
	value?: null | apiextv1.#JSON @go(Value,*apiextv1.JSON)
}

// Condition defines variable-based conditional criteria for rule execution.
#Condition: {
	// Key is the context entry (using JMESPath) for conditional rule evaluation.
	key?: null | apiextv1.#JSON @go(RawKey,*apiextv1.JSON)

	// Operator is the conditional operation to perform. Valid operators are:
	// Equals, NotEquals, In, AnyIn, AllIn, NotIn, AnyNotIn, AllNotIn, GreaterThanOrEquals,
	// GreaterThan, LessThanOrEquals, LessThan, DurationGreaterThanOrEquals, DurationGreaterThan,
	// DurationLessThanOrEquals, DurationLessThan
	operator?: #ConditionOperator @go(Operator)

	// Value is the conditional value, or set of values. The values can be fixed set
	// or can be variables declared using JMESPath.
	// +optional
	value?: null | apiextv1.#JSON @go(RawValue,*apiextv1.JSON)

	// Message is an optional display message
	message?: string @go(Message)
}

// ConditionOperator is the operation performed on condition key and value.
// +kubebuilder:validation:Enum=Equals;NotEquals;In;AnyIn;AllIn;NotIn;AnyNotIn;AllNotIn;GreaterThanOrEquals;GreaterThan;LessThanOrEquals;LessThan;DurationGreaterThanOrEquals;DurationGreaterThan;DurationLessThanOrEquals;DurationLessThan
#ConditionOperator: string

// ResourceFilters is a slice of ResourceFilter
#ResourceFilters: [...#ResourceFilter]

// ResourceFilter allow users to "AND" or "OR" between resources
#ResourceFilter: {
	// UserInfo contains information about the user performing the operation.
	// +optional
	UserInfo?: #UserInfo

	// ResourceDescription contains information about the resource being created or modified.
	resources?: #ResourceDescription @go(ResourceDescription)
}

// Mutation defines how resource are modified.
#Mutation: {
	// Targets defines the target resources to be mutated.
	// +optional
	targets?: [...#TargetResourceSpec] @go(Targets,[]TargetResourceSpec)

	// PatchStrategicMerge is a strategic merge patch used to modify resources.
	// See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
	// and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
	// +optional
	patchStrategicMerge?: null | apiextv1.#JSON @go(RawPatchStrategicMerge,*apiextv1.JSON)

	// PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
	// See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
	// +optional
	patchesJson6902?: string @go(PatchesJSON6902)

	// ForEach applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
	// +optional
	foreach?: [...#ForEachMutation] @go(ForEachMutation,[]ForEachMutation)
}

// ForEachMutation applies mutation rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
#ForEachMutation: {
	// List specifies a JMESPath expression that results in one or more elements
	// to which the validation logic is applied.
	list?: string @go(List)

	// Order defines the iteration order on the list.
	// Can be Ascending to iterate from first to last element or Descending to iterate in from last to first element.
	// +optional
	order?: null | #ForeachOrder @go(Order,*ForeachOrder)

	// Context defines variables and data sources that can be used during rule execution.
	// +optional
	context?: [...#ContextEntry] @go(Context,[]ContextEntry)

	// AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
	// set of conditions. The declaration can contain nested `any` or `all` statements.
	// See: https://kyverno.io/docs/writing-policies/preconditions/
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	preconditions?: null | #AnyAllConditions @go(AnyAllConditions,*AnyAllConditions)

	// PatchStrategicMerge is a strategic merge patch used to modify resources.
	// See https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/
	// and https://kubectl.docs.kubernetes.io/references/kustomize/patchesstrategicmerge/.
	// +optional
	patchStrategicMerge?: null | apiextv1.#JSON @go(RawPatchStrategicMerge,*apiextv1.JSON)

	// PatchesJSON6902 is a list of RFC 6902 JSON Patch declarations used to modify resources.
	// See https://tools.ietf.org/html/rfc6902 and https://kubectl.docs.kubernetes.io/references/kustomize/patchesjson6902/.
	// +optional
	patchesJson6902?: string @go(PatchesJSON6902)

	// Foreach declares a nested foreach iterator
	// +optional
	foreach?: null | apiextv1.#JSON @go(ForEachMutation,*apiextv1.JSON)
}

// Validation defines checks to be performed on matching resources.
#Validation: {
	// Message specifies a custom message to be displayed on failure.
	// +optional
	message?: string @go(Message)

	// Manifest specifies conditions for manifest verification
	// +optional
	manifests?: null | #Manifests @go(Manifests,*Manifests)

	// ForEach applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
	// +optional
	foreach?: [...#ForEachValidation] @go(ForEachValidation,[]ForEachValidation)

	// Pattern specifies an overlay-style pattern used to check resources.
	// +optional
	pattern?: null | apiextv1.#JSON @go(RawPattern,*apiextv1.JSON)

	// AnyPattern specifies list of validation patterns. At least one of the patterns
	// must be satisfied for the validation rule to succeed.
	// +optional
	anyPattern?: null | apiextv1.#JSON @go(RawAnyPattern,*apiextv1.JSON)

	// Deny defines conditions used to pass or fail a validation rule.
	// +optional
	deny?: null | #Deny @go(Deny,*Deny)

	// PodSecurity applies exemptions for Kubernetes Pod Security admission
	// by specifying exclusions for Pod Security Standards controls.
	// +optional
	podSecurity?: null | #PodSecurity @go(PodSecurity,*PodSecurity)

	// CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).
	// +optional
	cel?: null | #CEL @go(CEL,*CEL)
}

// PodSecurity applies exemptions for Kubernetes Pod Security admission
// by specifying exclusions for Pod Security Standards controls.
#PodSecurity: {
	// Level defines the Pod Security Standard level to be applied to workloads.
	// Allowed values are privileged, baseline, and restricted.
	// +kubebuilder:validation:Enum=privileged;baseline;restricted
	level?: api.#Level @go(Level)

	// Version defines the Pod Security Standard versions that Kubernetes supports.
	// Allowed values are v1.19, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, v1.26, latest. Defaults to latest.
	// +kubebuilder:validation:Enum=v1.19;v1.20;v1.21;v1.22;v1.23;v1.24;v1.25;v1.26;latest
	// +optional
	version?: string @go(Version)

	// Exclude specifies the Pod Security Standard controls to be excluded.
	exclude?: [...#PodSecurityStandard] @go(Exclude,[]PodSecurityStandard)
}

// PodSecurityStandard specifies the Pod Security Standard controls to be excluded.
#PodSecurityStandard: {
	// ControlName specifies the name of the Pod Security Standard control.
	// See: https://kubernetes.io/docs/concepts/security/pod-security-standards/
	// +kubebuilder:validation:Enum=HostProcess;Host Namespaces;Privileged Containers;Capabilities;HostPath Volumes;Host Ports;AppArmor;SELinux;/proc Mount Type;Seccomp;Sysctls;Volume Types;Privilege Escalation;Running as Non-root;Running as Non-root user
	controlName: string @go(ControlName)

	// Images selects matching containers and applies the container level PSS.
	// Each image is the image name consisting of the registry address, repository, image, and tag.
	// Empty list matches no containers, PSS checks are applied at the pod level only.
	// Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
	// +optional
	images?: [...string] @go(Images,[]string)
}

// CEL allows validation checks using the Common Expression Language (https://kubernetes.io/docs/reference/using-api/cel/).
#CEL: {
	// Expressions is a list of CELExpression types.
	expressions?: [...v1alpha1.#Validation] @go(Expressions,[]v1alpha1.Validation)

	// ParamKind is a tuple of Group Kind and Version.
	// +optional
	paramKind?: null | v1alpha1.#ParamKind @go(ParamKind,*v1alpha1.ParamKind)

	// ParamRef references a parameter resource.
	// +optional
	paramRef?: null | v1alpha1.#ParamRef @go(ParamRef,*v1alpha1.ParamRef)

	// AuditAnnotations contains CEL expressions which are used to produce audit annotations for the audit event of the API request.
	// +optional
	auditAnnotations?: [...v1alpha1.#AuditAnnotation] @go(AuditAnnotations,[]v1alpha1.AuditAnnotation)

	// Variables contain definitions of variables that can be used in composition of other expressions.
	// Each variable is defined as a named CEL expression.
	// The variables defined here will be available under `variables` in other expressions of the policy.
	// +optional
	variables?: [...v1alpha1.#Variable] @go(Variables,[]v1alpha1.Variable)
}

// Deny specifies a list of conditions used to pass or fail a validation rule.
#Deny: {
	// Multiple conditions can be declared under an `any` or `all` statement. A direct list
	// of conditions (without `any` or `all` statements) is also supported for backwards compatibility
	// but will be deprecated in the next major release.
	// See: https://kyverno.io/docs/writing-policies/validate/#deny-rules
	conditions?: null | apiextv1.#JSON @go(RawAnyAllConditions,*apiextv1.JSON)
}

// ForEachValidation applies validate rules to a list of sub-elements by creating a context for each entry in the list and looping over it to apply the specified logic.
#ForEachValidation: {
	// List specifies a JMESPath expression that results in one or more elements
	// to which the validation logic is applied.
	list?: string @go(List)

	// ElementScope specifies whether to use the current list element as the scope for validation. Defaults to "true" if not specified.
	// When set to "false", "request.object" is used as the validation scope within the foreach
	// block to allow referencing other elements in the subtree.
	// +optional
	elementScope?: null | bool @go(ElementScope,*bool)

	// Context defines variables and data sources that can be used during rule execution.
	// +optional
	context?: [...#ContextEntry] @go(Context,[]ContextEntry)

	// AnyAllConditions are used to determine if a policy rule should be applied by evaluating a
	// set of conditions. The declaration can contain nested `any` or `all` statements.
	// See: https://kyverno.io/docs/writing-policies/preconditions/
	// +kubebuilder:validation:XPreserveUnknownFields
	// +optional
	preconditions?: null | #AnyAllConditions @go(AnyAllConditions,*AnyAllConditions)

	// Pattern specifies an overlay-style pattern used to check resources.
	// +optional
	pattern?: null | apiextv1.#JSON @go(RawPattern,*apiextv1.JSON)

	// AnyPattern specifies list of validation patterns. At least one of the patterns
	// must be satisfied for the validation rule to succeed.
	// +optional
	anyPattern?: null | apiextv1.#JSON @go(RawAnyPattern,*apiextv1.JSON)

	// Deny defines conditions used to pass or fail a validation rule.
	// +optional
	deny?: null | #Deny @go(Deny,*Deny)

	// Foreach declares a nested foreach iterator
	// +optional
	foreach?: null | apiextv1.#JSON @go(ForEachValidation,*apiextv1.JSON)
}

// Generation defines how new resources should be created and managed.
#Generation: {
	// ResourceSpec contains information to select the resource.
	ResourceSpec?: #ResourceSpec

	// Synchronize controls if generated resources should be kept in-sync with their source resource.
	// If Synchronize is set to "true" changes to generated resources will be overwritten with resource
	// data from Data or the resource specified in the Clone declaration.
	// Optional. Defaults to "false" if not specified.
	// +optional
	synchronize?: bool @go(Synchronize)

	// Data provides the resource declaration used to populate each generated resource.
	// At most one of Data or Clone must be specified. If neither are provided, the generated
	// resource will be created with default data only.
	// +optional
	data?: null | apiextv1.#JSON @go(RawData,*apiextv1.JSON)

	// Clone specifies the source resource used to populate each generated resource.
	// At most one of Data or Clone can be specified. If neither are provided, the generated
	// resource will be created with default data only.
	// +optional
	clone?: #CloneFrom @go(Clone)

	// CloneList specifies the list of source resource used to populate each generated resource.
	// +optional
	cloneList?: #CloneList @go(CloneList)
}

#CloneList: {
	// Namespace specifies source resource namespace.
	namespace?: string @go(Namespace)

	// Kinds is a list of resource kinds.
	kinds?: [...string] @go(Kinds,[]string)

	// Selector is a label selector. Label keys and values in `matchLabels`.
	// wildcard characters are not supported.
	// +optional
	selector?: null | metav1.#LabelSelector @go(Selector,*metav1.LabelSelector)
}

#GenerateType: string // #enumGenerateType

#enumGenerateType:
	#Data |
	#Clone

#Data:  #GenerateType & "Data"
#Clone: #GenerateType & "Clone"

// CloneFrom provides the location of the source resource used to generate target resources.
// The resource kind is derived from the match criteria.
#CloneFrom: {
	// Namespace specifies source resource namespace.
	// +optional
	namespace?: string @go(Namespace)

	// Name specifies name of the resource.
	name?: string @go(Name)
}

#Manifests: {
	// Attestors specified the required attestors (i.e. authorities)
	// +kubebuilder:validation:Optional
	attestors?: [...#AttestorSet] @go(Attestors,[]AttestorSet)

	// AnnotationDomain is custom domain of annotation for message and signature. Default is "cosign.sigstore.dev".
	// +optional
	annotationDomain?: string @go(AnnotationDomain)

	// Fields which will be ignored while comparing manifests.
	// +optional
	ignoreFields?: #IgnoreFieldList @go(IgnoreFields)

	// DryRun configuration
	// +optional
	dryRun?: #DryRunOption @go(DryRunOption)

	// Repository is an optional alternate OCI repository to use for resource bundle reference.
	// The repository can be overridden per Attestor or Attestation.
	repository?: string @go(Repository)
}

// DryRunOption is a configuration for dryrun.
// If enable is set to "true", manifest verification performs "dryrun & compare"
// which provides robust matching against changes by defaults and other admission controllers.
// Dryrun requires additional permissions. See config/dryrun/dryrun_rbac.yaml
#DryRunOption: {
	enable?:    bool   @go(Enable)
	namespace?: string @go(Namespace)
}

#IgnoreFieldList: [...#ObjectFieldBinding]

#ObjectFieldBinding: k8smanifest.#ObjectFieldBinding

// AdmissionOperation can have one of the values CREATE, UPDATE, CONNECT, DELETE, which are used to match a specific action.
// +kubebuilder:validation:Enum=CREATE;CONNECT;UPDATE;DELETE
#AdmissionOperation: admissionv1.#Operation // #enumAdmissionOperation

#enumAdmissionOperation:
	#Create |
	#Update |
	#Delete |
	#Connect

#Create:  #AdmissionOperation & "CREATE"
#Update:  #AdmissionOperation & "UPDATE"
#Delete:  #AdmissionOperation & "DELETE"
#Connect: #AdmissionOperation & "CONNECT"
