// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/kyverno/kyverno/api/kyverno/v1

package v1

import apiextv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"

// ImageVerificationType selects the type of verification algorithm
// +kubebuilder:validation:Enum=Cosign;Notary
// +kubebuilder:default=Cosign
#ImageVerificationType: string // #enumImageVerificationType

#enumImageVerificationType:
	#Cosign |
	#Notary

// ImageRegistryCredentialsProvidersType provides the list of credential providers required.
// +kubebuilder:validation:Enum=default;amazon;azure;google;github
#ImageRegistryCredentialsProvidersType: string // #enumImageRegistryCredentialsProvidersType

#enumImageRegistryCredentialsProvidersType:
	#DEFAULT |
	#AWS |
	#ACR |
	#GCP |
	#GHCR

#Cosign:  #ImageVerificationType & "Cosign"
#Notary:  #ImageVerificationType & "Notary"
#DEFAULT: #ImageRegistryCredentialsProvidersType & "default"
#AWS:     #ImageRegistryCredentialsProvidersType & "amazon"
#ACR:     #ImageRegistryCredentialsProvidersType & "azure"
#GCP:     #ImageRegistryCredentialsProvidersType & "google"
#GHCR:    #ImageRegistryCredentialsProvidersType & "github"

// ImageVerification validates that images that match the specified pattern
// are signed with the supplied public key. Once the image is verified it is
// mutated to include the SHA digest retrieved during the registration.
#ImageVerification: {
	// Type specifies the method of signature validation. The allowed options
	// are Cosign and Notary. By default Cosign is used if a type is not specified.
	// +kubebuilder:validation:Optional
	type?: #ImageVerificationType @go(Type)

	// Deprecated. Use ImageReferences instead.
	// +kubebuilder:validation:Optional
	image?: string @go(Image)

	// ImageReferences is a list of matching image reference patterns. At least one pattern in the
	// list must match the image for the rule to apply. Each image reference consists of a registry
	// address (defaults to docker.io), repository, image, and tag (defaults to latest).
	// Wildcards ('*' and '?') are allowed. See: https://kubernetes.io/docs/concepts/containers/images.
	// +kubebuilder:validation:Optional
	imageReferences?: [...string] @go(ImageReferences,[]string)

	// Deprecated. Use StaticKeyAttestor instead.
	key?: string @go(Key)

	// Deprecated. Use KeylessAttestor instead.
	roots?: string @go(Roots)

	// Deprecated. Use KeylessAttestor instead.
	subject?: string @go(Subject)

	// Deprecated. Use KeylessAttestor instead.
	issuer?: string @go(Issuer)

	// Deprecated.
	additionalExtensions?: {[string]: string} @go(AdditionalExtensions,map[string]string)

	// Attestors specified the required attestors (i.e. authorities)
	// +kubebuilder:validation:Optional
	attestors?: [...#AttestorSet] @go(Attestors,[]AttestorSet)

	// Attestations are optional checks for signed in-toto Statements used to verify the image.
	// See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
	// OCI registry and decodes them into a list of Statement declarations.
	attestations?: [...#Attestation] @go(Attestations,[]Attestation)

	// Deprecated. Use annotations per Attestor instead.
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// Repository is an optional alternate OCI repository to use for image signatures and attestations that match this rule.
	// If specified Repository will override the default OCI image repository configured for the installation.
	// The repository can also be overridden per Attestor or Attestation.
	repository?: string @go(Repository)

	// MutateDigest enables replacement of image tags with digests.
	// Defaults to true.
	// +kubebuilder:default=true
	// +kubebuilder:validation:Optional
	mutateDigest: bool @go(MutateDigest)

	// VerifyDigest validates that images have a digest.
	// +kubebuilder:default=true
	// +kubebuilder:validation:Optional
	verifyDigest: bool @go(VerifyDigest)

	// Required validates that images are verified i.e. have matched passed a signature or attestation check.
	// +kubebuilder:default=true
	// +kubebuilder:validation:Optional
	required: bool @go(Required)

	// ImageRegistryCredentials provides credentials that will be used for authentication with registry.
	// +kubebuilder:validation:Optional
	imageRegistryCredentials?: null | #ImageRegistryCredentials @go(ImageRegistryCredentials,*ImageRegistryCredentials)

	// UseCache enables caching of image verify responses for this rule.
	// +kubebuilder:default=true
	// +kubebuilder:validation:Optional
	useCache: bool @go(UseCache)
}

#AttestorSet: {
	// Count specifies the required number of entries that must match. If the count is null, all entries must match
	// (a logical AND). If the count is 1, at least one entry must match (a logical OR). If the count contains a
	// value N, then N must be less than or equal to the size of entries, and at least N entries must match.
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:Minimum:=1
	count?: null | int @go(Count,*int)

	// Entries contains the available attestors. An attestor can be a static key,
	// attributes for keyless verification, or a nested attestor declaration.
	// +kubebuilder:validation:Optional
	entries?: [...#Attestor] @go(Entries,[]Attestor)
}

#Attestor: {
	// Keys specifies one or more public keys.
	// +kubebuilder:validation:Optional
	keys?: null | #StaticKeyAttestor @go(Keys,*StaticKeyAttestor)

	// Certificates specifies one or more certificates.
	// +kubebuilder:validation:Optional
	certificates?: null | #CertificateAttestor @go(Certificates,*CertificateAttestor)

	// Keyless is a set of attribute used to verify a Sigstore keyless attestor.
	// See https://github.com/sigstore/cosign/blob/main/KEYLESS.md.
	// +kubebuilder:validation:Optional
	keyless?: null | #KeylessAttestor @go(Keyless,*KeylessAttestor)

	// Attestor is a nested set of Attestor used to specify a more complex set of match authorities.
	// +kubebuilder:validation:Optional
	attestor?: null | apiextv1.#JSON @go(Attestor,*apiextv1.JSON)

	// Annotations are used for image verification.
	// Every specified key-value pair must exist and match in the verified payload.
	// The payload may contain other key-value pairs.
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// Repository is an optional alternate OCI repository to use for signatures and attestations that match this rule.
	// If specified Repository will override other OCI image repository locations for this Attestor.
	repository?: string @go(Repository)
}

#StaticKeyAttestor: {
	// Keys is a set of X.509 public keys used to verify image signatures. The keys can be directly
	// specified or can be a variable reference to a key specified in a ConfigMap (see
	// https://kyverno.io/docs/writing-policies/variables/), or reference a standard Kubernetes Secret
	// elsewhere in the cluster by specifying it in the format "k8s://<namespace>/<secret_name>".
	// The named Secret must specify a key `cosign.pub` containing the public key used for
	// verification, (see https://github.com/sigstore/cosign/blob/main/KMS.md#kubernetes-secret).
	// When multiple keys are specified each key is processed as a separate staticKey entry
	// (.attestors[*].entries.keys) within the set of attestors and the count is applied across the keys.
	publicKeys?: string @go(PublicKeys)

	// Specify signature algorithm for public keys. Supported values are sha256 and sha512.
	// +kubebuilder:default=sha256
	signatureAlgorithm?: string @go(SignatureAlgorithm)

	// KMS provides the URI to the public key stored in a Key Management System. See:
	// https://github.com/sigstore/cosign/blob/main/KMS.md
	kms?: string @go(KMS)

	// Reference to a Secret resource that contains a public key
	secret?: null | #SecretReference @go(Secret,*SecretReference)

	// Rekor provides configuration for the Rekor transparency log service. If an empty object
	// is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.
	// +kubebuilder:validation:Optional
	rekor?: null | #Rekor @go(Rekor,*Rekor)

	// CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
	// Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.
	// +kubebuilder:validation:Optional
	ctlog?: null | #CTLog @go(CTLog,*CTLog)
}

#SecretReference: {
	// Name of the secret. The provided secret must contain a key named cosign.pub.
	name: string @go(Name)

	// Namespace name where the Secret exists.
	namespace: string @go(Namespace)
}

#CertificateAttestor: {
	// Cert is an optional PEM-encoded public certificate.
	// +kubebuilder:validation:Optional
	cert?: string @go(Certificate)

	// CertChain is an optional PEM encoded set of certificates used to verify.
	// +kubebuilder:validation:Optional
	certChain?: string @go(CertificateChain)

	// Rekor provides configuration for the Rekor transparency log service. If an empty object
	// is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.
	// +kubebuilder:validation:Optional
	rekor?: null | #Rekor @go(Rekor,*Rekor)

	// CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
	// Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.
	// +kubebuilder:validation:Optional
	ctlog?: null | #CTLog @go(CTLog,*CTLog)
}

#KeylessAttestor: {
	// Rekor provides configuration for the Rekor transparency log service. If an empty object
	// is provided the public instance of Rekor (https://rekor.sigstore.dev) is used.
	// +kubebuilder:validation:Optional
	rekor?: null | #Rekor @go(Rekor,*Rekor)

	// CTLog (certificate timestamp log) provides a configuration for validation of Signed Certificate
	// Timestamps (SCTs). If the value is unset, the default behavior by Cosign is used.
	// +kubebuilder:validation:Optional
	ctlog?: null | #CTLog @go(CTLog,*CTLog)

	// Issuer is the certificate issuer used for keyless signing.
	// +kubebuilder:validation:Optional
	issuer?: string @go(Issuer)

	// Subject is the verified identity used for keyless signing, for example the email address.
	// +kubebuilder:validation:Optional
	subject?: string @go(Subject)

	// Roots is an optional set of PEM encoded trusted root certificates.
	// If not provided, the system roots are used.
	// +kubebuilder:validation:Optional
	roots?: string @go(Roots)

	// AdditionalExtensions are certificate-extensions used for keyless signing.
	// +kubebuilder:validation:Optional
	additionalExtensions?: {[string]: string} @go(AdditionalExtensions,map[string]string)
}

#Rekor: {
	// URL is the address of the transparency log. Defaults to the public Rekor log instance https://rekor.sigstore.dev.
	// +kubebuilder:validation:Required
	// +kubebuilder:Default:=https://rekor.sigstore.dev
	url: string @go(URL)

	// RekorPubKey is an optional PEM-encoded public key to use for a custom Rekor.
	// If set, this will be used to validate transparency log signatures from a custom Rekor.
	// +kubebuilder:validation:Optional
	pubkey?: string @go(RekorPubKey)

	// IgnoreTlog skips transparency log verification.
	// +kubebuilder:validation:Optional
	ignoreTlog?: bool @go(IgnoreTlog)
}

#CTLog: {
	// IgnoreSCT defines whether to use the Signed Certificate Timestamp (SCT) log to check for a certificate
	// timestamp. Default is false. Set to true if this was opted out during signing.
	// +kubebuilder:validation:Optional
	ignoreSCT?: bool @go(IgnoreSCT)

	// PubKey, if set, is used to validate SCTs against a custom source.
	// +kubebuilder:validation:Optional
	pubkey?: string @go(CTLogPubKey)
}

// Attestation are checks for signed in-toto Statements that are used to verify the image.
// See https://github.com/in-toto/attestation. Kyverno fetches signed attestations from the
// OCI registry and decodes them into a list of Statements.
#Attestation: {
	// Deprecated in favour of 'Type', to be removed soon
	// +kubebuilder:validation:Optional
	predicateType: string @go(PredicateType)

	// Type defines the type of attestation contained within the Statement.
	// +kubebuilder:validation:Optional
	type: string @go(Type)

	// Attestors specify the required attestors (i.e. authorities).
	// +kubebuilder:validation:Optional
	attestors: [...#AttestorSet] @go(Attestors,[]AttestorSet)

	// Conditions are used to verify attributes within a Predicate. If no Conditions are specified
	// the attestation check is satisfied as long there are predicates that match the predicate type.
	// +kubebuilder:validation:Optional
	conditions?: [...#AnyAllConditions] @go(Conditions,[]AnyAllConditions)
}

#ImageRegistryCredentials: {
	// AllowInsecureRegistry allows insecure access to a registry.
	// +kubebuilder:validation:Optional
	allowInsecureRegistry?: bool @go(AllowInsecureRegistry)

	// Providers specifies a list of OCI Registry names, whose authentication providers are provided.
	// It can be of one of these values: default,google,azure,amazon,github.
	// +kubebuilder:validation:Optional
	providers?: [...#ImageRegistryCredentialsProvidersType] @go(Providers,[]ImageRegistryCredentialsProvidersType)

	// Secrets specifies a list of secrets that are provided for credentials.
	// Secrets must live in the Kyverno namespace.
	// +kubebuilder:validation:Optional
	secrets?: [...string] @go(Secrets,[]string)
}
